#!/usr/bin/env python3

print('\033[1;41m!!! Experimental/alpha quality suitable for testing at your own risk only !!!\033[0m')

# Conditional imports in this file
# import sendclient.download
# import sendclient.upload

import argparse
import sys
import os
import getpass
import tempfile

parser = argparse.ArgumentParser(description='Unofficial (Firefox) Send client')

service = parser.add_argument_group('Set the Send service to used').add_mutually_exclusive_group()
service.add_argument('--service-local', dest='altservice', action='store_const', const='http://localhost:8080/', help='Use a Send service at http://localhost:8080')
service.add_argument('--service-dev', dest='altservice', action='store_const', const='https://send.dev.mozaws.net/', help='Use the Send development server for upload')
service.add_argument('--service-stage', dest='altservice', action='store_const', const='https://send.stage.mozaws.net/', help='Use the Send staging server for upload')
service.add_argument('--service-live', dest='altservice', action='store_const', const='https://send.firefox.com/', help='Use the Send production server for upload (Default)')
service.add_argument('--service', type=str, default=os.environ.get('SEND_SERVICE', 'https://send.firefox.com/'), help='Specify the url of a Send service to use for upload, can also be set with the environment variable SEND_SERVICE')

action = parser.add_argument_group('Action').add_mutually_exclusive_group()
action.add_argument('--file', type=argparse.FileType('rb'), help='Upload the specified file to Firefox Send')
action.add_argument('--stdin', type=str, help='Upload data read from standard input with this filename')
action.add_argument('--url', type=str, help='Download a file with a Send link')

parser.add_argument('input', nargs='?', help='Uploads or downloads a file specified by path or url, no other options required')

parser.add_argument('--ignore-version', help='Disable server version checks (MAY CAUSE LOSS OF DATA)', action='store_true')

args = parser.parse_args()

# Set the service url to local/dev/stage/pro or other, there should be a cleaner way of doing this
service = args.altservice or args.service

def case_url(url):
    import sendclient.download

    file, suggested_name = sendclient.download.send_urlToFile(url, ignoreVersion=args.ignore_version)

    filename = input('Press enter to save to "' + suggested_name + '", or specify a new name now: ') or suggested_name
    os.rename(file.name, filename)
    print("Done.")

def case_file(file, fileName=None):
    import sendclient.upload

    print("Would you like to set a download password? if so enter it now (push enter for no password)")
    password = getpass.getpass()
    if password != '':
        secretUrl, delete_token = sendclient.upload.send_file(service, file, password=password, ignoreVersion=args.ignore_version, fileName=fileName)
    else:
        secretUrl, delete_token = sendclient.upload.send_file(service, file, ignoreVersion=args.ignore_version, fileName=fileName)

    print('File Uploaded, use the following link to retrieve it')
    print(secretUrl)
    print('To delete the file use this token: %s' % delete_token)

if args.url:
    case_url(args.url)
elif args.file:
    case_file(args.file)
elif args.stdin:
    # Write stdin to a temp file
    hack = tempfile.TemporaryFile()
    hack.write(sys.stdin.buffer.read())
    hack.seek(0)
    case_file(hack, fileName=args.stdin)

elif args.input:
    '''determine if the input is a file or a url'''
    if os.path.exists(args.input):
        # upload
        # TODO ask for confirmation (as --file was not specified)
        case_file(open(args.input, 'rb'))
    else:
        # download
        case_url(args.input)

else:
    parser.print_usage()
    sys.exit(1)

sys.exit(0)
